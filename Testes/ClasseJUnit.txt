rm80653 Alex Lee



public class JulgamentoPrisioneiro {
	   private int PENA_INOCENCIA = 10;
	   private int PENA_CONDENACAO_MUTUA = 15;
	   private int PENA_CONDENACAO_INDIVIDUAL = 10;
	   private int PENA_CONDENACAO_CUMPLICES = 11;

	   
	  
	   public int calculaPena(Resposta respostaPrisioneiroA, Resposta respostaPrisioneiroB) {
	      if (respostaPrisioneiroA == Resposta.DELACAO) {
	          if (respostaPrisioneiroB == Resposta.DELACAO) {
	            return PENA_CONDENACAO_MUTUA;
	          } else {
	                 return PENA_INOCENCIA;
	                 }
	       } else {
	                if (respostaPrisioneiroB == Resposta.DELACAO) {
	                    return PENA_CONDENACAO_INDIVIDUAL;
	                } else {
	                         return PENA_CONDENACAO_CUMPLICES;
	                        }
	                }
	     }
	}



import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class JulgamentoPrisioneiroTest {

	@Test
	void test() {
		fail("Not yet implemented");
	}

}

NOTA : não foi encontrado o enum Resposta

Etapa 2



public class JulgamentoPrisioneiro {
	   private int PENA_INOCENCIA = 10;
	   private int PENA_CONDENACAO_MUTUA = 15;
	   private int PENA_CONDENACAO_INDIVIDUAL = 10;
	   private int PENA_CONDENACAO_CUMPLICES = 11;

	   
	   public enum Resposta{
		   NEGADO, DELACAO
	   }
	   public int calculaPena(Resposta respostaPrisioneiroA, Resposta respostaPrisioneiroB) {
	      if (respostaPrisioneiroA == Resposta.DELACAO) {
	          if (respostaPrisioneiroB == Resposta.DELACAO) {
	            return PENA_CONDENACAO_MUTUA;
	          } else {
	                 return PENA_INOCENCIA;
	                 }
	       } else {
	                if (respostaPrisioneiroB == Resposta.DELACAO) {
	                    return PENA_CONDENACAO_INDIVIDUAL;
	                } else {
	                         return PENA_CONDENACAO_CUMPLICES;
	                        }
	                }
	     }
	}

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class JulgamentoPrisioneiroTest {

	@Test
	void test() {
		fail("Not yet implemented");
	}

}

Nota : Criação da classe Enum resposta
Etapa 3

public class JulgamentoPrisioneiro {
   private int PENA_INOCENCIA = 10;
   private int PENA_CONDENACAO_MUTUA = 15;
   private int PENA_CONDENACAO_INDIVIDUAL = 10;
   private int PENA_CONDENACAO_CUMPLICES = 11;

   public enum Resposta{
	   NEGACAO, DELACAO
   }
   
   public int calculaPena(Resposta respostaPrisioneiroA, Resposta respostaPrisioneiroB) {
      if (respostaPrisioneiroA == Resposta.DELACAO) {
          if (respostaPrisioneiroB == Resposta.DELACAO) {
            return PENA_CONDENACAO_MUTUA;
          } else {
                 return PENA_INOCENCIA;
                 }
       } else {
                if (respostaPrisioneiroB == Resposta.DELACAO) {
                    return PENA_CONDENACAO_INDIVIDUAL;
                } else {
                         return PENA_CONDENACAO_CUMPLICES;
                        }
                }
     }
}


import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import JulgamentoPrisioneiro.Resposta;

class JulgamentoPrisioneiroTest {

	@Test
	void testJulgamento() {
		Resposta respSuspeitoA = Resposta.DELACAO;
		Resposta respSuspeitoB = Resposta.DELACAO;
		
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		assertNotNull(jp);
		
		int penaSuspeitoA = jp.calculaPena(respSuspeitoA, respSuspeitoB);
		int penaSuspeitoB = jp.calculaPena(respSuspeitoB, respSuspeitoA);
		
		assertEquals(5, penaSuspeitoA);
		assertEquals(5, penaSuspeitoB);
		
	}

}
Nota : Encontrado erro de importação do enum Resposta e da utilização no teste

Etapa 4

public class JulgamentoPrisioneiro {
   private int PENA_INOCENCIA = 10;
   private int PENA_CONDENACAO_MUTUA = 15;
   private int PENA_CONDENACAO_INDIVIDUAL = 10;
   private int PENA_CONDENACAO_CUMPLICES = 11;

   public enum Resposta{
	   NEGACAO, DELACAO
   }
   
   public int calculaPena(Resposta respostaPrisioneiroA, Resposta respostaPrisioneiroB) {
      if (respostaPrisioneiroA == Resposta.DELACAO) {
          if (respostaPrisioneiroB == Resposta.DELACAO) {
            return PENA_CONDENACAO_MUTUA;
          } else {
                 return PENA_INOCENCIA;
                 }
       } else {
                if (respostaPrisioneiroB == Resposta.DELACAO) {
                    return PENA_CONDENACAO_INDIVIDUAL;
                } else {
                         return PENA_CONDENACAO_CUMPLICES;
                        }
                }
     }

public enum Resposta {
	NEGACAO, DELACAO
}






JulgamentoPrisioneiroTest.java


import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import JulgamentoPrisioneiro.Resposta;

class JulgamentoPrisioneiroTest {

	@Test
	void testJulgamento() {
		Resposta respSuspeitoA = Resposta.DELACAO;
		Resposta respSuspeitoB = Resposta.DELACAO;
		
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		assertNotNull(jp);
		
		int penaSuspeitoA = jp.calculaPena(respSuspeitoA, respSuspeitoB);
		int penaSuspeitoB = jp.calculaPena(respSuspeitoB, respSuspeitoA);
		
		assertEquals(5, penaSuspeitoA);
		assertEquals(5, penaSuspeitoB);
		
	}

}

Nota : Adicionado  classe Resposta.Java com enum Publico para as classes conseguirem utilizar


Etapa 5
public class JulgamentoPrisioneiro {
   private int PENA_INOCENCIA = 10;
   private int PENA_CONDENACAO_MUTUA = 15;
   private int PENA_CONDENACAO_INDIVIDUAL = 10;
   private int PENA_CONDENACAO_CUMPLICES = 11;

   public int calculaPena(Resposta respostaPrisioneiroA, Resposta respostaPrisioneiroB) {
      if (respostaPrisioneiroA == Resposta.DELACAO) {
          if (respostaPrisioneiroB == Resposta.DELACAO) {
            return PENA_CONDENACAO_MUTUA;
          } else {
                 return PENA_INOCENCIA;
                 }
       } else {
                if (respostaPrisioneiroB == Resposta.DELACAO) {
                    return PENA_CONDENACAO_INDIVIDUAL;
                } else {
                         return PENA_CONDENACAO_CUMPLICES;
                        }
                }
     }
}

Resposta.java

public enum Resposta {
	NEGACAO, DELACAO
}




JulgamentoPrisioneiroTest.java


import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;


class JulgamentoPrisioneiroTest {

	@Test
	public void testJulgamento() {
		Resposta respSuspeitoA = Resposta.DELACAO;
		Resposta respSuspeitoB = Resposta.DELACAO;
		
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		assertNotNull(jp);
		
		int penaSuspeitoA = jp.calculaPena(respSuspeitoA, respSuspeitoB);
		int penaSuspeitoB = jp.calculaPena(respSuspeitoB, respSuspeitoA);
		
		assertEquals(5, penaSuspeitoA);
		assertEquals(5, penaSuspeitoB);
		
	}

}

Nota : Remoção do enum Resposta na classe de implementação (JulgamentoPrisioneiro.java) para utilização do correspondente que consta na classe (Resposta.java)


Etapa 6

JulgamentoPrisioneiro.java


public class JulgamentoPrisioneiro {
   private int PENA_INOCENCIA = 10;
   private int PENA_CONDENACAO_MUTUA = 15;
   private int PENA_CONDENACAO_INDIVIDUAL = 10;
   private int PENA_CONDENACAO_CUMPLICES = 11;

   public int calculaPena(Resposta respostaPrisioneiroA, Resposta respostaPrisioneiroB) {
      if (respostaPrisioneiroA == Resposta.DELACAO) {
          if (respostaPrisioneiroB == Resposta.DELACAO) {
            return PENA_CONDENACAO_MUTUA;
          } else {
                 return PENA_INOCENCIA;
                 }
       } else {
                if (respostaPrisioneiroB == Resposta.DELACAO) {
                    return PENA_CONDENACAO_INDIVIDUAL;
                } else {
                         return PENA_CONDENACAO_CUMPLICES;
                        }
                }
     }
}




Resposta.java

public enum Resposta {
	NEGACAO, DELACAO
}




JulgamentoPrisioneiroTest.java


import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;


class JulgamentoPrisioneiroTest {

	@Test
	public void testJulgamento() {
		Resposta respSuspeitoA = Resposta.DELACAO;
		Resposta respSuspeitoB = Resposta.DELACAO;
		
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		assertNotNull(jp);
		
		int penaSuspeitoA = jp.calculaPena(respSuspeitoA, respSuspeitoB);
		int penaSuspeitoB = jp.calculaPena(respSuspeitoB, respSuspeitoA);
		
		assertEquals(15, penaSuspeitoA);
		assertEquals(15, penaSuspeitoB);
		
	}

}
Nota : Realizado teste e o resultado foi positivo

Etapa 7 

JulgamentoPrisioneiro.java


public class JulgamentoPrisioneiro {
   private int PENA_INOCENCIA = 10;
   private int PENA_CONDENACAO_MUTUA = 15;
   private int PENA_CONDENACAO_INDIVIDUAL = 10;
   private int PENA_CONDENACAO_CUMPLICES = 11;

   public int calculaPena(Resposta respostaPrisioneiroA, Resposta respostaPrisioneiroB) {
      if (respostaPrisioneiroA == Resposta.DELACAO) {
          if (respostaPrisioneiroB == Resposta.DELACAO) {
            return PENA_CONDENACAO_MUTUA;
          } else {
                 return PENA_INOCENCIA;
                 }
       } else {
                if (respostaPrisioneiroB == Resposta.DELACAO) {
                    return PENA_CONDENACAO_INDIVIDUAL;
                } else {
                         return PENA_CONDENACAO_CUMPLICES;
                        }
                }
     }
}




Resposta.java

public enum Resposta {
	NEGACAO, DELACAO
}




JulgamentoPrisioneiroTest.java


import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;


class JulgamentoPrisioneiroTest {

	@Test
	public void testJulgamento() {
		Resposta respSuspeitoA = Resposta.DELACAO;
		Resposta respSuspeitoB = Resposta.DELACAO;
		
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		assertNotNull(jp);
		
		int penaSuspeitoA = jp.calculaPena(respSuspeitoA, respSuspeitoB);
		int penaSuspeitoB = jp.calculaPena(respSuspeitoB, respSuspeitoA);
		
		assertEquals(10, penaSuspeitoA);
		assertEquals(15, penaSuspeitoB);
		
	}

}
 
Nota : Realizado testes para simular erro simulação bem sucedida


